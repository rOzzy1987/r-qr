#ifndef __QR_DATA_H
#define __QR_DATA_H

#include <stdint.h>

#include "qr_types.h"




/**
 * Special characters that can be still used in alphanmeric mode
 * 
 * The order of them defines the byte value they get when encoding
 */
const uint8_t qr_alphanum_chars[] = {
    ' ','$','%','*','+',
    '-','.','/',':'
};

/**
 * Character capacities for different modes
 * 
 * index by [mode], [version] then [ec-level]
 */
const uint16_t qr_capacities[][40][4] = {
    { // QR_MODE_NUM
        /* version  1 */ {  41,  34,  27,  17},
        /* version  2 */ {  77,  63,  48,  34},
        /* version  3 */ { 127, 101,  77,  58},
        /* version  4 */ { 187, 149, 111,  82},
        /* version  5 */ { 255, 202, 144, 106},
        /* version  6 */ { 322, 255, 178, 139},
        /* version  7 */ { 370, 293, 207, 154},
        /* version  8 */ { 461, 365, 259, 202},
        /* version  9 */ { 552, 432, 312, 235},
        /* version 10 */ { 652, 513, 364, 288},
        /* version 11 */ { 772, 604, 427, 331},
        /* version 12 */ { 883, 691, 489, 374},
        /* version 13 */ {1022, 796, 580, 427},
        /* version 14 */ {1101, 871, 621, 468},
        /* version 15 */ {1250, 991, 703, 530},
        /* version 16 */ {1408,1082, 775, 602},
        /* version 17 */ {1548,1212, 876, 674},
        /* version 18 */ {1725,1346, 948, 746},
        /* version 19 */ {1903,1500,1063, 813},
        /* version 20 */ {2061,1600,1159, 919},
        /* version 21 */ {2232,1708,1224, 969},
        /* version 22 */ {2409,1872,1358,1056},
        /* version 23 */ {2620,2059,1468,1108},
        /* version 24 */ {2812,2188,1588,1228},
        /* version 25 */ {3057,2395,1718,1286},
        /* version 26 */ {3283,2544,1804,1425},
        /* version 27 */ {3517,2701,1933,1501},
        /* version 28 */ {3669,2857,2085,1581},
        /* version 29 */ {3909,3035,2181,1677},
        /* version 30 */ {4158,3289,2358,1782},
        /* version 31 */ {4417,3486,2473,1897},
        /* version 32 */ {4686,3693,2670,2022},
        /* version 33 */ {4965,3909,2805,2157},
        /* version 34 */ {5253,4134,2949,2301},
        /* version 35 */ {5529,4343,3081,2361},
        /* version 36 */ {5836,4588,3244,2524},
        /* version 37 */ {6153,4775,3417,2625},
        /* version 38 */ {6479,5039,3599,2735},
        /* version 39 */ {6743,5313,3791,2927},
        /* version 40 */ {7089,5596,3993,3057},
    },{ // QR_MODE_ALPHA
        /* version  1 */ {  25,  20,  16,  10},
        /* version  2 */ {  47,  38,  29,  20},
        /* version  3 */ {  77,  61,  47,  35},
        /* version  4 */ { 114,  90,  67,  50},
        /* version  5 */ { 154, 122,  87,  64},
        /* version  6 */ { 195, 154, 108,  84},
        /* version  7 */ { 224, 178, 125,  93},
        /* version  8 */ { 279, 221, 157, 122},
        /* version  9 */ { 335, 262, 189, 143},
        /* version 10 */ { 395, 311, 221, 174},
        /* version 11 */ { 468, 366, 259, 200},
        /* version 12 */ { 535, 419, 296, 227},
        /* version 13 */ { 619, 483, 352, 259},
        /* version 14 */ { 667, 528, 376, 283},
        /* version 15 */ { 758, 600, 426, 321},
        /* version 16 */ { 854, 656, 470, 365},
        /* version 17 */ { 938, 734, 531, 408},
        /* version 18 */ {1046, 816, 574, 452},
        /* version 19 */ {1153, 909, 644, 493},
        /* version 20 */ {1249, 970, 702, 557},
        /* version 21 */ {1352,1035, 742, 587},
        /* version 22 */ {1460,1134, 823, 640},
        /* version 23 */ {1588,1248, 890, 672},
        /* version 24 */ {1704,1326, 963, 744},
        /* version 25 */ {1853,1451,1041, 779},
        /* version 26 */ {1990,1542,1094, 864},
        /* version 27 */ {2132,1637,1172, 910},
        /* version 28 */ {2223,1732,1263, 958},
        /* version 29 */ {2369,1839,1322,1016},
        /* version 30 */ {2520,1994,1429,1080},
        /* version 31 */ {2677,2113,1499,1150},
        /* version 32 */ {2840,2238,1618,1226},
        /* version 33 */ {3009,2369,1700,1307},
        /* version 34 */ {3183,2506,1787,1394},
        /* version 35 */ {3351,2632,1867,1431},
        /* version 36 */ {3537,2780,1966,1530},
        /* version 37 */ {3729,2894,2071,1591},
        /* version 38 */ {3927,3054,2181,1658},
        /* version 39 */ {4087,3220,2298,1774},
        /* version 40 */ {4296,3391,2420,1852},
    },{ // QR_MODE_BYTE
        /* version  1 */ {  17,  14,  11,   7},
        /* version  2 */ {  32,  26,  20,  14},
        /* version  3 */ {  53,  42,  32,  24},
        /* version  4 */ {  78,  62,  46,  34},
        /* version  5 */ { 106,  84,  60,  44},
        /* version  6 */ { 134, 106,  74,  58},
        /* version  7 */ { 154, 122,  86,  64},
        /* version  8 */ { 192, 152, 108,  84},
        /* version  9 */ { 230, 180, 130,  98},
        /* version 10 */ { 271, 213, 151, 119},
        /* version 11 */ { 321, 251, 177, 137},
        /* version 12 */ { 367, 287, 203, 155},
        /* version 13 */ { 425, 331, 241, 177},
        /* version 14 */ { 458, 362, 258, 194},
        /* version 15 */ { 520, 412, 292, 220},
        /* version 16 */ { 586, 450, 322, 250},
        /* version 17 */ { 644, 504, 364, 280},
        /* version 18 */ { 718, 560, 394, 310},
        /* version 19 */ { 792, 624, 442, 338},
        /* version 20 */ { 858, 666, 482, 382},
        /* version 21 */ { 929, 711, 509, 403},
        /* version 22 */ {1003, 779, 565, 439},
        /* version 23 */ {1091, 857, 611, 461},
        /* version 24 */ {1171, 911, 661, 511},
        /* version 25 */ {1273, 997, 715, 535},
        /* version 26 */ {1367,1059, 751, 593},
        /* version 27 */ {1465,1125, 805, 625},
        /* version 28 */ {1528,1190, 868, 658},
        /* version 29 */ {1628,1264, 908, 698},
        /* version 30 */ {1732,1370, 982, 742},
        /* version 31 */ {1840,1452,1030, 790},
        /* version 32 */ {1952,1538,1112, 842},
        /* version 33 */ {2068,1628,1168, 898},
        /* version 34 */ {2188,1722,1228, 958},
        /* version 35 */ {2303,1809,1283, 983},
        /* version 36 */ {2431,1911,1351,1051},
        /* version 37 */ {2563,1989,1423,1093},
        /* version 38 */ {2699,2099,1499,1139},
        /* version 39 */ {2809,2213,1579,1219},
        /* version 40 */ {2953,2331,1663,1273},
    }
};



/**
 * The block structure for different versions
 * 
 * index by [version] and [ec-level]
 */
const QrBlockStruct qr_blocks[40][4] = {
    { // v1
        {7, {1, 19}, {0, 0}},
        {10, {1, 16}, {0, 0}},
        {13, {1, 13}, {0, 0}},
        {17, {1, 9}, {0, 0}},
    },{ // v2
        {10, {1, 34}, {0, 0}},
        {16, {1, 28}, {0, 0}},
        {22, {1, 22}, {0, 0}},
        {28, {1, 16}, {0, 0}},
    },{ // v3
        {15, {1, 55}, {0, 0}},
        {26, {1, 44}, {0, 0}},
        {18, {2, 17}, {0, 0}},
        {22, {2, 13}, {0, 0}},
    },{ // v4
        {20, {1, 80}, {0, 0}},
        {18, {2, 32}, {0, 0}},
        {26, {2, 24}, {0, 0}},
        {16, {4, 9}, {0, 0}},
    },{ // v5
        {26, {1, 108}, {0, 0}},
        {24, {2, 43}, {0, 0}},
        {18, {2, 15}, {2, 16}},
        {22, {2, 11}, {2, 12}},
    },{ // v6
        {18, {2, 68}, {0, 0}},
        {16, {4, 27}, {0, 0}},
        {24, {4, 19}, {0, 0}},
        {28, {4, 15}, {0, 0}},
    },{ // v7
        {20, {2, 78}, {0, 0}},
        {18, {4, 31}, {0, 0}},
        {18, {2, 14}, {4, 15}},
        {26, {4, 13}, {1, 14}},
    },{ // v8
        {24, {2, 97}, {0, 0}},
        {22, {2, 38}, {2, 39}},
        {22, {4, 18}, {2, 19}},
        {26, {4, 14}, {2, 15}},
    },{ // v9
        {30, {2, 116}, {0, 0}},
        {22, {3, 36}, {2, 37}},
        {20, {4, 16}, {4, 17}},
        {24, {4, 12}, {4, 13}},
    },{ // v10
        {18, {2, 68}, {2, 69}},
        {26, {4, 43}, {1, 44}},
        {24, {6, 19}, {2, 20}},
        {28, {6, 15}, {2, 16}},
    },{ // v11
        {20, {4, 81}, {0, 0}},
        {30, {1, 50}, {4, 51}},
        {28, {4, 22}, {4, 23}},
        {24, {3, 12}, {8, 13}},
    },{ // v12
        {24, {2, 92}, {2, 93}},
        {22, {6, 36}, {2, 37}},
        {26, {4, 20}, {6, 21}},
        {28, {7, 14}, {4, 15}},
    },{ // v13
        {26, {4, 107}, {0, 0}},
        {22, {8, 37}, {1, 38}},
        {24, {8, 20}, {4, 21}},
        {22, {12, 11}, {4, 12}},
    },{ // v14
        {30, {3, 115}, {1, 116}},
        {24, {4, 40}, {5, 41}},
        {20, {11, 16}, {5, 17}},
        {24, {11, 12}, {5, 13}},
    },{ // v15
        {22, {5, 87}, {1, 88}},
        {24, {5, 41}, {5, 42}},
        {30, {5, 24}, {7, 25}},
        {24, {11, 12}, {7, 13}},
    },{ // v16
        {24, {5, 98}, {1, 99}},
        {28, {7, 45}, {3, 46}},
        {24, {15, 19}, {2, 20}},
        {30, {3, 15}, {13, 16}},
    },{ // v17
        {28, {1, 107}, {5, 108}},
        {28, {10, 46}, {1, 47}},
        {28, {1, 22}, {15, 23}},
        {28, {2, 14}, {17, 15}},
    },{ // v18
        {30, {5, 120}, {1, 121}},
        {26, {9, 43}, {4, 44}},
        {28, {17, 22}, {1, 23}},
        {28, {2, 14}, {19, 15}},
    },{ // v19
        {28, {3, 113}, {4, 114}},
        {26, {3, 44}, {11, 45}},
        {26, {17, 21}, {4, 22}},
        {26, {9, 13}, {16, 14}},
    },{ // v20
        {28, {3, 107}, {5, 108}},
        {26, {3, 41}, {13, 42}},
        {30, {15, 24}, {5, 25}},
        {28, {15, 15}, {10, 16}},
    },{ // v21
        {28, {4, 116}, {4, 117}},
        {26, {17, 42}, {0, 0}},
        {28, {17, 22}, {6, 23}},
        {30, {19, 16}, {6, 17}},
    },{ // v22
        {28, {2, 111}, {7, 112}},
        {28, {17, 46}, {0, 0}},
        {30, {7, 24}, {16, 25}},
        {24, {34, 13}, {0, 0}},
    },{ // v23
        {30, {4, 121}, {5, 122}},
        {28, {4, 47}, {14, 48}},
        {30, {11, 24}, {14, 25}},
        {30, {16, 15}, {14, 16}},
    },{ // v24
        {30, {6, 117}, {4, 118}},
        {28, {6, 45}, {14, 46}},
        {30, {11, 24}, {16, 25}},
        {30, {30, 16}, {2, 17}},
    },{ // v25
        {26, {8, 106}, {4, 107}},
        {28, {8, 47}, {13, 48}},
        {30, {7, 24}, {22, 25}},
        {30, {22, 15}, {13, 16}},
    },{ // v26
        {28, {10, 114}, {2, 115}},
        {28, {19, 46}, {4, 47}},
        {28, {28, 22}, {6, 23}},
        {30, {33, 16}, {4, 17}},
    },{ // v27
        {30, {8, 122}, {4, 123}},
        {28, {22, 45}, {3, 46}},
        {30, {8, 23}, {26, 24}},
        {30, {12, 15}, {28, 16}},
    },{ // v28
        {30, {3, 117}, {10, 118}},
        {28, {3, 45}, {23, 46}},
        {30, {4, 24}, {31, 25}},
        {30, {11, 15}, {31, 16}},
    },{ // v29
        {30, {7, 116}, {7, 117}},
        {28, {21, 45}, {7, 46}},
        {30, {1, 23}, {37, 24}},
        {30, {19, 15}, {26, 16}},
    },{ // v30
        {30, {5, 115}, {10, 116}},
        {28, {19, 47}, {10, 48}},
        {30, {15, 24}, {25, 25}},
        {30, {23, 15}, {25, 16}},
    },{ // v31
        {30, {13, 115}, {3, 116}},
        {28, {2, 46}, {29, 47}},
        {30, {42, 24}, {1, 25}},
        {30, {23, 15}, {28, 16}},
    },{ // v32
        {30, {17, 115}, {0, 0}},
        {28, {10, 46}, {23, 47}},
        {30, {10, 24}, {35, 25}},
        {30, {19, 15}, {35, 16}},
    },{ // v33
        {30, {17, 115}, {1, 116}},
        {28, {14, 46}, {21, 47}},
        {30, {29, 24}, {19, 25}},
        {30, {11, 15}, {46, 16}},
    },{ // v34
        {30, {13, 115}, {6, 116}},
        {28, {14, 46}, {23, 47}},
        {30, {44, 24}, {7, 25}},
        {30, {59, 16}, {1, 17}},
    },{ // v35
        {30, {12, 121}, {7, 122}},
        {28, {12, 47}, {26, 48}},
        {30, {39, 24}, {14, 25}},
        {30, {22, 15}, {41, 16}},
    },{ // v36
        {30, {6, 121}, {14, 122}},
        {28, {6, 47}, {34, 48}},
        {30, {46, 24}, {10, 25}},
        {30, {2, 15}, {64, 16}},
    },{ // v37
        {30, {17, 122}, {4, 123}},
        {28, {29, 46}, {14, 47}},
        {30, {49, 24}, {10, 25}},
        {30, {24, 15}, {46, 16}},
    },{ // v38
        {30, {4, 122}, {18, 123}},
        {28, {13, 46}, {32, 47}},
        {30, {48, 24}, {14, 25}},
        {30, {42, 15}, {32, 16}},
    },{ // v39
        {30, {20, 117}, {4, 118}},
        {28, {40, 47}, {7, 48}},
        {30, {43, 24}, {22, 25}},
        {30, {10, 15}, {67, 16}},
    },{ // v40
        {30, {19, 118}, {6, 119}},
        {28, {18, 47}, {31, 48}},
        {30, {34, 24}, {34, 25}},
        {30, {20, 15}, {61, 16}},
    }
};

const uint8_t qr_mode_indicator[] = {1,2,4};
const uint8_t qr_mode_charsPerUnit[] = {3, 2, 1};
const uint8_t qr_mode_unitBitLength[] = {10, 11, 8};

uint8_t qr_lengthBits(uint8_t v, uint8_t mode){
    
    switch(mode) {
        case 0:
            return v<10 ? 10 : v < 27 ? 12 :  14;
        case 1:
            return v<10 ? 9 : v < 27 ? 11 :  13;
        case 2:
            return v<10 ? 8 : 16;
    }
    return 0;
}

uint8_t qr_size(uint8_t v){
    return 17 + (v << 2);
}

/**
 * @brief Generates an array of alignment factors for a QR code of a given
 * version. The array is 0-indexed, with the first element being the position
 * of the first alignment pattern, and the last element being the position of
 * the last alignment pattern.
 * @param[in] v The version of the QR code, 0-based.
 * @param[out] n The size of the returned array.
 * @return An array of alignment factors, 0-indexed. The caller is responsible
 * for freeing the memory when done.
 */
uint8_t *qr_alignment_factors(uint8_t v, uint8_t &n) {
        v++; // switch to 1-based
        if (v == 1) {
            n = 1;
            return new uint8_t[1]{6};
        }

        n = (v/7) + 2; 
        uint8_t *r = new uint8_t[n];
        r[0] = 6;
        r[n-1]= 10 + v * 4;

        if (n == 2) return r;

        uint8_t d = r[n-1] - r[0]; 
        uint8_t s = d/(n-1);
        uint8_t rem = d%(n-1);
        if (rem) s++;
        if (s&1) s++;

        uint8_t x = r[n-1];
        for(uint8_t i =  n-2; i > 0; i--){
            x-= s;
            r[i]=x;
        }
        return r;
}


const uint16_t qr_format_divisor = 0b10100110111;
const uint16_t qr_format_mask = 0b101010000010010;


#endif //__QR_DATA_H