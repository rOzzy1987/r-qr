#ifndef __QR_H
#define __QR_H

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <cstring>
#include "qr_types.h"
#include "qr_data.h"
#include "qr_gf256.h"
#include "qr_render.h"
#include "qr_rank.h"
#include "qr_debug.h"
#include "qr_encoder.h"

class CQrGen {
    public:
        /**
         * Creates a QR code from raw data, renders the bitmap, adds format information and applies a mask
         * @param data raw data to encode
         * @param length length of the data
         * @param mode QR mode to use (default: QrMode::Unspecified, which means auto-detect)
         * @param ecLevel QR error correction level to use (default: QrEcc::L)
         * @return a QrCode object containing the encoded data and the rendered bitmap
         */
        QrCode* create(const char* data, uint16_t length, QrMode mode = QrMode::Unspecified, QrEcc ecLevel = QrEcc::L, uint8_t version = 40){
            QrCode *result = createRaw(data, length, mode, ecLevel, version);
            setFormat(result);
            QrRenderer.render(result);
            QrRenderer.renderFormat(result);
            applyBestMask(result);

            return result;
        }

        /**
         * Creates a QR code from raw data without rendering the bitmap (allocates space though)
         * @param data raw data to encode
         * @param length length of the data
         * @param mode QR mode to use (default: QrMode::Unspecified, which means auto-detect)
         * @param ecLevel QR error correction level to use (default: QrEcc::L)
         * @return QrCode object
         */
        QrCode* createRaw(const char* data, uint16_t length, QrMode mode = QrMode::Unspecified, QrEcc ecLevel = QrEcc::L, uint8_t version = 40) {
            uint8_t *buff;
            uint16_t dataLen;

            buff = QrEncoder.encode(data, length, dataLen, version, mode, ecLevel);
            QrCode *result = new QrCode(version, ecLevel);
            result->raw = buff;
            result->rawSize = dataLen;

            return result;
        }
       
        /**
         * Sets the format information for a given QR code by mapping the error correction level 
         * and mask pattern to a 15-bit format string. The mapping involves a bitwise operation 
         * with a predefined mask, and the result is stored in the formatPoly field of the QR code. 
         * This function ensures that the error correction level (ecLevel) is mapped using a specific 
         * conversion table and the final format string is generated by performing a long division 
         * using a generator polynomial.
         *
         * @param code Pointer to the QrCode object whose format information is to be set.
         */
        void setFormat(QrCode *code){
            // Need to map ecLevel according to the table below
            // Note that only the last bit is flipped
            //                L  M  Q  H
            // Logical value  00 01 10 11
            // Mapped value   01 00 11 10
            int8_t 
                ec = code->ecLevel ^ 0x01,
                m = code->mask,
                i;
            uint16_t 
                f = ((ec << 3) | m) << 10,
                t = f,
                d = qr_format_divisor;

            for(i = 4; i >= 0; i--){
                // 0000 0100 0000 0000
                if (t & (0x400 << i)){
                    t ^= d << i;
                }
            }

            f |= t;
            f ^= qr_format_mask;
            code->formatPoly = f;
        }
        
        /**
         * Applies the best mask to the QR code. It does this by computing the rank of the QR code with each mask and then
         * selecting the mask with the lowest rank.
         * @param code The QR code to apply the best mask to
         */
        void applyBestMask(QrCode *code){
            uint16_t scores[8] = {QrRanker.rank(code)};
            for(uint8_t i = 1; i < 8; i++){
                changeMask(code, i);
                scores[i] = QrRanker.rank(code);
            }

            uint8_t mi = 0;
            for (uint8_t i = 0; i < 8; i++){
                if (scores[i] < scores[mi]) mi = i;
            }
            changeMask(code, mi);
        }

        /**
         * Changes the mask applied to the given QR code by first removing the existing mask and then
         * applying the new specified mask. Updates the QR code's mask property and format information,
         * and re-renders the format to reflect the changes.
         *
         * @param code Pointer to the QrCode object to which the mask change should be applied.
         * @param mask The new mask pattern to apply to the QR code.
         */
        void changeMask(QrCode *code, uint8_t mask){
            QrRenderer.applyMask(code, code->mask);
            QrRenderer.applyMask(code, mask);
            code->mask = mask;
            setFormat(code);
            QrRenderer.renderFormat(code);
        }
};

CQrGen QrGenerator;

#endif //__QR_H